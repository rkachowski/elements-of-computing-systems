#!/usr/bin/env ruby

require 'rake'
require 'pry-byebug'

A_COMMAND = "A_COMMAND"
C_COMMAND = "C_COMMAND"
L_COMMAND = "L_COMMAND"

VAR_BASE = 1024

class Code
  @@comp_table ={
    # a = 0
    '0' => "0101010",
    '1' => "0111111",
    '-1' => "0111010",
    'D' => "0001100",
    'A' => "0110000",
    '!D' => "0001101",
    '!A' => "0110001",
    '-D' => "0001111",
    '-A' => "0110011",
    'D+1' => "0011111",
    'A+1' => "0110111",
    'D-1' => "0001110",
    'A-1' => "0110010",
    'D+A' => "0000010",
    'D-A' => "0010011",
    'A-D' => "0000111",
    'D&A' => "0000000",
    'D|A' => "0010101",

    #a = 1
    'M' => "1110000",
    '!M' => "1110001",
    '-M' => "1110011",
    'M+1' => "1110111",
    'M-1' => "1110010",
    'D+M' => "1000010",
    'D-M' => "1010011",
    'M-D' => "1000111",
    'D&M' => "1000000",
    'D|M' => "1010101"
  }

  @@dst_table = {
    'M' => "001", 
    'D' => "010", 
    'MD' => "011", 
    'A' => "100", 
    'AM' => "101", 
    'AD' => "110", 
    'AMD' => "111" 
  }
  @@jump_table = {
    'JGT' => "001", 
    'JEQ' => "010", 
    'JGE' => "011", 
    'JLT' => "100", 
    'JNE' => "101", 
    'JLE' => "110", 
    'JMP' => "111" 
  }

  def self.dest mnem
    dst, _, _ = parse mnem

    @@dst_table[dst] || "000"
  end

  def self.comp mnem

    _,comp, _ = parse mnem
     unless @@comp_table[comp]
       binding.pry
    raise "Unknown comp sequence #{comp} from instruction #{mnem} "
     end
    @@comp_table[comp]
  end

  def self.jump mnem
    _,_,jmp = parse mnem
    @@jump_table[jmp] || "000"
  end

  def self.parse inst
    dst, comp, jmp = inst.scan(/^(\w{0,3}=)?([^;\n]{0,3});?(J\w\w)?/).flatten

    dst = dst.split('=').first if dst
    [dst, comp, jmp]
  end

  def self.mnem_to_bin inst

    "111"+comp(inst)+dest(inst)+jump(inst)
  end
end

@symbol_table = {labels:{}, vars:{}}

def a_command inst
  value = inst.split('@').last
  begin
  "0#{"%015b" % value}"
  rescue
    binding.pry
  end
end

def command_type command

  return A_COMMAND if command.start_with? '@'
  return L_COMMAND if command =~ /^(\(\w*\))$/
  return C_COMMAND unless Code.parse(command).flatten.empty?

end

def assemble code, filename, output
  puts "Assembling #{filename}..."

  assembled = code.map do |inst|

    case command_type inst
    when A_COMMAND
      a_command inst
    when L_COMMAND
      raise "unsupported LCOMMAND"
    when C_COMMAND
      Code.mnem_to_bin inst
    end

  end

  puts "Writing to #{output}"

  File.open(output.to_s,"w") { |f| f << assembled.join("\n") }
end

def build_symbol_table code
  code.each_with_index do |inst, ind|

    case command_type inst
    when A_COMMAND
      if inst =~ /[^@\d]/
        sym = inst.split('@').last

        @symbol_table[:vars][sym] = @symbol_table[:vars].count unless @symbol_table[:vars][sym] or @symbol_table[:labels][sym]
      end
    when L_COMMAND
      sym = inst.scan(/\((\w*)\)/).flatten.first
      @symbol_table[:labels][sym] = ind
      @symbol_table[:vars].delete sym
    end
  end

  #gonna remove labels from code, so transform offsets to reflect this
  @symbol_table[:labels] = @symbol_table[:labels].reduce({}) do |table, (k,v)|
    table[k] = v - @symbol_table[:labels].values.find_index(v)
    table
  end

  @symbol_table[:vars].each {|k,v| @symbol_table[:vars][k] = v + VAR_BASE }
  @symbol_table[:vars].merge!({"R0"=>0, "R1"=>1, "R2"=>2, "R3"=>3, "R4"=>4, "R5"=>5, "R6"=>6, "R7"=>7, "R8"=>8, "R9"=>9, "R10"=>10, "R11"=>11, "R12"=>12, "R13"=>13, "R14"=>14, "R15"=>15})
end

def remove_symbols code
  all_symbols = @symbol_table[:vars].merge(@symbol_table[:labels])
  lines_with_symbols = code.select{|l| l =~ /@\D+.*/}

  lines_with_symbols.each_with_index do |line|
    sym = line.scan(/@(.*)/)[0][0]
    line.gsub!(sym, all_symbols[sym].to_s)
  end

  code.delete_if {|l| l =~ /^\(.*\)$/ }
end

abort "Usage: hack-asm <filename> <output>" unless ARGV[0]

filename = ARGV[0].to_s
output = ARGV[1] || filename.ext(".hack")

abort "File not found at #{filename}" unless File.exists? filename

file = File.open(filename).read.lines
#
#remove comments and whitespace
code = file.delete_if {|l| l.start_with?('//')}.map{|l| l.split('//').first.strip }.delete_if{|l| l.empty?}
build_symbol_table code
remove_symbols code

assemble code, filename, output
