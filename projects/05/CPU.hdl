// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And16(a=true,b=instruction,out=ins,out[15]=cInst,out[12]=aOrM,
        out[11]=c1,out[10]=c2,out[9]=c3,out[8]=c4,out[7]=c5,out[6]=c6,
        out[5]=aDest,out[4]=dDest,out[3]=mDest,out[0..2]=jmpBits);

    Mux16(a=aluOut,b=ins,sel=aInstr,out=aMuxOut);
    ARegister(in=aMuxOut,load=writeA,out=outA,out[0..14]=addressM);

    DRegister(in=aluOut,load=writeD,out=outD);
    Mux16(a=outA,b=inM, sel=aOrM,out=aluMuxOut);
    PC(reset=reset,load=doJump,inc=true,in=outA,out[0..14]=pc);

    And(a=cInst,b=mDest,out=writeM);
    And(a=cInst,b=dDest,out=writeD);
    Or(a=aInstr,b=aDest,out=writeA);

    Not(in=cInst,out=aInstr);
    And(a=cInst,b=jmpOut,out=doJump);

    ALU(x=outD,y=aluMuxOut,zx=c1,nx=c2,zy=c3, ny=c4,f=c5,no=c6,out=outM,out=aluOut,
        zr=zrOut,ng=ngOut);

    //jumps
    Mux8Way16(a=false,b[0]=jgt,c[0]=zrOut,d[0]=jgeOut,e[0]=ngOut,f[0]=notzrOut,g[0]=jle,h=true,sel=jmpBits,out[0]=jmpOut);

    //jgt
    Or(a=zrOut,b=ngOut,out=gtOrOut);
    Not(in=gtOrOut,out=jgt);
    //jge
    Not(in=ngOut,out=notngOut);
    Or(a=zrOut,b=notngOut,out=jgeOut);

    Not(in=zrOut,out=notzrOut);//jne
    Or(a=zrOut,b=ngOut,out=jle);//jle
}
